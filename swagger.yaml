openapi: 3.0.0
info:
  title: Jira Clone API
  version: 1.0.0
  description: API documentation for Jira Clone application

servers:
  - url: http://localhost:3000/api/v1
    description: Development server

# Security schemes
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # Reusable schemas
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        name:
          type: string

    LoginResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
          properties:
            token:
              type: string
            user:
              $ref: "#/components/schemas/User"

    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid
          description: ID of the user who created this organization

    OrganizationUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organizationId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        role:
          type: string
          enum: [ADMIN, MEMBER]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        organizationId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid

    ProjectUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        role:
          type: string
          enum: [ADMIN, MEMBER]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [TODO, IN_PROGRESS, DONE]
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH]
        assigneeId:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid

    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        taskId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid

# Auth endpoints
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Bad request

  /auth/login:
    post:
      summary: Login a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  # Organization endpoints
  /organizations:
    post:
      summary: Create a new organization
      tags:
        - Organizations
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        "201":
          description: Organization created successfully
        "401":
          description: Unauthorized
        "400":
          description: Bad request

    get:
      summary: Get all organizations
      tags:
        - Organizations
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: false
          description: Organization name
        - in: query
          name: limit
          schema:
            type: number
          required: false
          description: Number of items per page
        - in: query
          name: skip
          schema:
            type: number
          required: false
          description: Number of items to skip
      responses:
        "200":
          description: List of organizations
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Organization"
        "401":
          description: Unauthorized

  /organizations/{id}:
    get:
      summary: Get an organization by ID
      tags:
        - Organizations
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Organization ID
      responses:
        "200":
          description: Organization details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Organization"
        "401":
          description: Unauthorized
        "404":
          description: Organization not found

    put:
      summary: Update an organization
      tags:
        - Organizations
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Organization ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "200":
          description: Organization updated successfully
        "401":
          description: Unauthorized
        "404":
          description: Organization not found

    delete:
      summary: Delete an organization
      tags:
        - Organizations
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Organization ID
      responses:
        "200":
          description: Organization deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Organization not found

  # Organization User endpoints
  /organizations-users:
    post:
      summary: Add a user to an organization
      tags:
        - Organization Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - organizationId
                - userId
                - role
              properties:
                organizationId:
                  type: string
                  format: uuid
                userId:
                  type: string
                  format: uuid
                role:
                  type: string
                  enum: [ADMIN, MEMBER]
      responses:
        "201":
          description: User added to organization successfully
        "401":
          description: Unauthorized
        "400":
          description: Bad request
        "404":
          description: Organization or user not found

    get:
      summary: Get users in an organization
      tags:
        - Organization Users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: organizationId
          schema:
            type: string
            format: uuid
          required: true
          description: Organization ID
        - in: query
          name: limit
          schema:
            type: number
          required: false
          description: Number of items per page
        - in: query
          name: skip
          schema:
            type: number
          required: false
          description: Number of items to skip
      responses:
        "200":
          description: List of users in the organization
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/OrganizationUser"
        "401":
          description: Unauthorized
        "404":
          description: Organization not found

  /organizations-users/{id}:
    get:
      summary: Get organization user details
      tags:
        - Organization Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Organization User ID
      responses:
        "200":
          description: Organization user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/OrganizationUser"
        "401":
          description: Unauthorized
        "404":
          description: Organization user not found

    put:
      summary: Update organization user
      tags:
        - Organization Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Organization User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [ADMIN, MEMBER]
      responses:
        "200":
          description: Organization user updated successfully
        "401":
          description: Unauthorized
        "404":
          description: Organization user not found

    delete:
      summary: Remove user from organization
      tags:
        - Organization Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Organization User ID
      responses:
        "200":
          description: User removed from organization successfully
        "401":
          description: Unauthorized
        "404":
          description: Organization user not found

  # Project endpoints
  /projects:
    post:
      summary: Create a new project
      tags:
        - Projects
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - organizationId
              properties:
                name:
                  type: string
                description:
                  type: string
                organizationId:
                  type: string
                  format: uuid
      responses:
        "201":
          description: Project created successfully
        "401":
          description: Unauthorized
        "400":
          description: Bad request

    get:
      summary: Get all projects
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: false
          description: Project name
        - in: query
          name: organizationId
          schema:
            type: string
            format: uuid
          required: false
          description: Organization ID
        - in: query
          name: limit
          schema:
            type: number
          required: false
          description: Number of items per page
        - in: query
          name: skip
          schema:
            type: number
          required: false
          description: Number of items to skip
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized

  /projects/{id}:
    get:
      summary: Get a project by ID
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Project ID
      responses:
        "200":
          description: Project details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
        "404":
          description: Project not found

    put:
      summary: Update a project
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Project ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        "200":
          description: Project updated successfully
        "401":
          description: Unauthorized
        "404":
          description: Project not found

    delete:
      summary: Delete a project
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Project ID
      responses:
        "200":
          description: Project deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Project not found

  # Project User endpoints
  /projects-users:
    post:
      summary: Add a user to a project
      tags:
        - Project Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - projectId
                - userId
                - role
              properties:
                projectId:
                  type: string
                  format: uuid
                userId:
                  type: string
                  format: uuid
                role:
                  type: string
                  enum: [ADMIN, MEMBER]
      responses:
        "201":
          description: User added to project successfully
        "401":
          description: Unauthorized
        "400":
          description: Bad request
        "404":
          description: Project or user not found

    get:
      summary: Get users in a project
      tags:
        - Project Users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: projectId
          schema:
            type: string
            format: uuid
          required: true
          description: Project ID
        - in: query
          name: limit
          schema:
            type: number
          required: false
          description: Number of items per page
        - in: query
          name: skip
          schema:
            type: number
          required: false
          description: Number of items to skip
      responses:
        "200":
          description: List of users in the project
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProjectUser"
        "401":
          description: Unauthorized
        "404":
          description: Project not found

  /projects-users/{id}:
    get:
      summary: Get project user details
      tags:
        - Project Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Project User ID
      responses:
        "200":
          description: Project user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ProjectUser"
        "401":
          description: Unauthorized
        "404":
          description: Project user not found

    put:
      summary: Update project user
      tags:
        - Project Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Project User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [ADMIN, MEMBER]
      responses:
        "200":
          description: Project user updated successfully
        "401":
          description: Unauthorized
        "404":
          description: Project user not found

    delete:
      summary: Remove user from project
      tags:
        - Project Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Project User ID
      responses:
        "200":
          description: User removed from project successfully
        "401":
          description: Unauthorized
        "404":
          description: Project user not found

  # Task endpoints
  /tasks:
    post:
      summary: Create a new task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - projectId
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [TODO, IN_PROGRESS, DONE]
                  default: TODO
                priority:
                  type: string
                  enum: [LOW, MEDIUM, HIGH]
                  default: MEDIUM
                assigneeId:
                  type: string
                  format: uuid
                projectId:
                  type: string
                  format: uuid
      responses:
        "201":
          description: Task created successfully
        "401":
          description: Unauthorized
        "400":
          description: Bad request

    get:
      summary: Get all tasks
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: title
          schema:
            type: string
          required: false
          description: Task title
        - in: query
          name: status
          schema:
            type: string
            enum: [TODO, IN_PROGRESS, DONE]
          required: false
          description: Task status
        - in: query
          name: priority
          schema:
            type: string
            enum: [LOW, MEDIUM, HIGH]
          required: false
          description: Task priority
        - in: query
          name: assigneeId
          schema:
            type: string
            format: uuid
          required: false
          description: Assignee ID
        - in: query
          name: projectId
          schema:
            type: string
            format: uuid
          required: false
          description: Project ID
        - in: query
          name: limit
          schema:
            type: number
          required: false
          description: Number of items per page
        - in: query
          name: skip
          schema:
            type: number
          required: false
          description: Number of items to skip
      responses:
        "200":
          description: List of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Task"
        "401":
          description: Unauthorized

  /tasks/{id}:
    get:
      summary: Get a task by ID
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Task ID
      responses:
        "200":
          description: Task details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Task"
        "401":
          description: Unauthorized
        "404":
          description: Task not found

    put:
      summary: Update a task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [TODO, IN_PROGRESS, DONE]
                priority:
                  type: string
                  enum: [LOW, MEDIUM, HIGH]
                assigneeId:
                  type: string
                  format: uuid
      responses:
        "200":
          description: Task updated successfully
        "401":
          description: Unauthorized
        "404":
          description: Task not found

    delete:
      summary: Delete a task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Task ID
      responses:
        "200":
          description: Task deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Task not found

  # Comment endpoints
  /comments:
    post:
      summary: Create a new comment
      tags:
        - Comments
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
                - taskId
              properties:
                content:
                  type: string
                taskId:
                  type: string
                  format: uuid
      responses:
        "201":
          description: Comment created successfully
        "401":
          description: Unauthorized
        "400":
          description: Bad request

    get:
      summary: Get all comments
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: taskId
          schema:
            type: string
            format: uuid
          required: false
          description: Task ID
        - in: query
          name: limit
          schema:
            type: number
          required: false
          description: Number of items per page
        - in: query
          name: skip
          schema:
            type: number
          required: false
          description: Number of items to skip
      responses:
        "200":
          description: List of comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
        "401":
          description: Unauthorized

  /comments/{id}:
    get:
      summary: Get a comment by ID
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Comment ID
      responses:
        "200":
          description: Comment details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Comment"
        "401":
          description: Unauthorized
        "404":
          description: Comment not found

    put:
      summary: Update a comment
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Comment ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        "200":
          description: Comment updated successfully
        "401":
          description: Unauthorized
        "404":
          description: Comment not found

    delete:
      summary: Delete a comment
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Comment ID
      responses:
        "200":
          description: Comment deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Comment not found
